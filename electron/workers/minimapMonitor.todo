Past (Current Implementation)
Data: Pre-processor only generates landmark data (landmarks.bin).
Loading: JavaScript loads only landmarks.bin and sends it to the C++ addon.
Search Logic: The C++ addon performs a single, global search by matching the live minimap's patterns against the pre-computed landmark map.
Context: Each search is independent; the system has no memory of the previous position.
Failure: If no landmark is found, the search fails completely, returning no position.
Future (Proposed Two-Tiered Implementation)
1. Pre-processor Enhancements:
* In addition to landmarks.bin, the pre-processor will now also save the fully assembled map for each Z-level into a new file, fullmap.bin.
2. JavaScript Layer (MinimapMatcher & minimapMonitor) Enhancements:
* Data Loading: The MinimapMatcher class in JS will be updated to load both landmarks.bin and the new fullmap.bin for each Z-level.
* Data Transfer: Both landmark data and full map data will be passed to the native C++ addon during initialization.
* State Management: The minimapMonitor.js worker will now maintain a lastKnownPosition state variable in memory.
* Hinted API Call: The findPosition function call will be modified to accept an optional hint object (our lastKnownPosition). This hint is passed from JS to C++ with every search request.
3. C++ Addon Enhancements:
* New Data Storage: The C++ MinimapMatcher class will have new members to store the full map data received from JavaScript, keeping it in memory for fast access.
* Updated findPosition Signature: The native findPosition method will be updated to accept the optional hint object from JavaScript.
* Two-Tier Execute Logic: The PositionFinderWorker::Execute function will be fundamentally restructured:
* Tier 1 (Global Landmark Search): First, it performs the existing, ultra-fast landmark hash map lookup. If a match is found, it returns the position immediately.
* Tier 2 (Hinted Local Search): Only if Tier 1 fails, it checks if a valid hint was provided.
* If a hint exists, it defines a small search window (e.g., a 100x100 pixel square) on the full map, centered around the hinted coordinates.
* It then performs a brute-force template match of the live minimap against the full map data, but only within this small window.
* If a match is found in the local search, it returns the new position. If not, the search fails.