================================================================================
NATIVE MODULE PERFORMANCE BENCHMARK
================================================================================
Iterations: 100000
Warmup: 10
Frame: /tmp/hb_mismatch_1760002760077.raw

Frame loaded: 1920x1044 (31.64 MB)

--------------------------------------------------------------------------------
Module: findSequences
--------------------------------------------------------------------------------
  Loaded 160 production sequences
Function: findSequencesNative
Parameters: 3 arguments

Results:
  Iterations: 100000
  Total time: 82.07s

Performance Statistics:
  Min:     0.508 ms
  Max:     13.419 ms
  Mean:    0.821 ms ¬± 0.278 ms
  Median:  0.701 ms
  75th %:  0.980 ms
  90th %:  1.246 ms
  95th %:  1.391 ms
  99th %:  1.564 ms
  99.9th %: 1.823 ms

Outlier Analysis:
  Outliers (>3œÉ): 357 (0.36%)
  Threshold: 1.654 ms
  ‚ö†Ô∏è  Max outlier is 19.2x median (likely GC/OS scheduler)


Throughput: 1218.5 operations/sec

Result: Object with keys: 

================================================================================
PERFORMANCE SUMMARY
================================================================================

Module Performance Ranking (fastest to slowest):

 1. findSequences            0.82 ms ‚ñà

Performance Targets:
  üü¢ Excellent: < 2ms   (60+ FPS capable)
  üü° Good:      < 5ms   (good for real-time)
  üü† Acceptable: < 10ms (acceptable)
  üî¥ Slow:      > 10ms  (needs optimization)

üü¢ findSequences: 0.82 ms

Frame Budget Analysis (60 FPS = 16.67 ms/frame):

  findSequences:
    Mean: 0.82 ms (4.9% of frame budget) ‚úì
    95th: 1.39 ms (8.3% of frame budget) ‚úì

================================================================================
Benchmark complete!

Next steps:
  1. Identify bottlenecks using --verbose flag
  2. Profile with perf: perf record -g node tools/benchmark_native_modules.js <module>
  3. Optimize hot paths in C++ code
  4. Re-run benchmark to verify improvements
================================================================================
